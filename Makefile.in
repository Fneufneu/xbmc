include bootstrap.mk

null :=
space := ${null} ${null}
${space} := ${space}

AUTOGENERATED_MAKEFILES=@OUTPUT_FILES@

EC_DIRS= \
	tools/EventClients

XBMCTEX_DIRS= \
	tools/TexturePacker

DVDPCODECS_DIRS= \
	lib \
	lib/libdvd 

ifeq (@USE_LIBSTAGEFRIGHT@,1)
DVDPCODECS_DIRS += src/cores/dvdplayer/DVDCodecs/Video/libstagefrightICS
endif

DVDPLAYER_ARCHIVES=src/cores/dvdplayer/DVDPlayer.a \
                   src/cores/dvdplayer/DVDCodecs/DVDCodecs.a \
                   src/cores/dvdplayer/DVDCodecs/Audio/Audio.a \
                   src/cores/dvdplayer/DVDCodecs/Overlay/Overlay.a \
                   src/cores/dvdplayer/DVDCodecs/Video/Video.a \
                   src/cores/dvdplayer/DVDDemuxers/DVDDemuxers.a \
                   src/cores/dvdplayer/DVDInputStreams/DVDInputStreams.a \
                   src/cores/dvdplayer/DVDSubtitles/DVDSubtitles.a

DIRECTORY_ARCHIVES=$(DVDPLAYER_ARCHIVES) \
                   lib/SlingboxLib/SlingboxLib.a \
                   lib/libRTV/librtv.a \
                   lib/libXDAAP/libxdaap.a \
                   lib/libhts/libhts.a \
                   lib/libsquish/libsquish.a \
                   src/addons/addons.a \
                   src/cdrip/cdrip.a \
                   src/cores/AudioEngine/audioengine.a \
                   src/cores/DllLoader/dllloader.a \
                   src/cores/DllLoader/exports/exports.a \
                   src/cores/DllLoader/exports/util/exports_utils.a \
                   src/cores/ExternalPlayer/ExternalPlayer.a \
                   src/cores/VideoRenderers/VideoRenderer.a \
                   src/cores/VideoRenderers/VideoShaders/VideoShaders.a \
                   src/cores/cores.a \
                   src/cores/paplayer/paplayer.a \
                   src/cores/playercorefactory/playercorefactory.a \
                   src/dbwrappers/dbwrappers.a \
                   src/dialogs/dialogs.a \
                   src/epg/epg.a \
                   src/filesystem/MusicDatabaseDirectory/musicdatabasedirectory.a \
                   src/filesystem/VideoDatabaseDirectory/videodatabasedirectory.a \
                   src/filesystem/filesystem.a \
                   src/guilib/guilib.a \
                   src/input/input.a \
                   src/interfaces/generic/interfaces-generic.a \
                   src/interfaces/info/info.a \
                   src/interfaces/interfaces.a \
                   src/interfaces/json-rpc/json-rpc.a \
                   src/linux/linux.a \
                   src/listproviders/listproviders.a \
                   src/media/media.a \
                   src/music/dialogs/musicdialogs.a \
                   src/music/infoscanner/musicscanner.a \
                   src/music/karaoke/karaoke.a \
                   src/music/music.a \
                   src/music/tags/musictags.a \
                   src/music/windows/musicwindows.a \
                   src/network/websocket/websocket.a \
                   src/network/network.a \
                   src/peripherals/bus/peripheral-bus.a \
                   src/peripherals/devices/peripheral-devices.a \
                   src/peripherals/dialogs/peripheral-dialogs.a \
                   src/peripherals/peripherals.a \
                   src/pictures/pictures.a \
                   src/playlists/playlists.a \
                   src/powermanagement/powermanagement.a \
                   src/profiles/profiles.a \
                   src/profiles/dialogs/profiles_dialogs.a \
                   src/profiles/windows/profiles_windows.a \
                   src/programs/programs.a \
                   src/pvr/addons/pvraddons.a \
                   src/pvr/channels/pvrchannels.a \
                   src/pvr/dialogs/pvrdialogs.a \
                   src/pvr/pvr.a \
                   src/pvr/recordings/pvrrecordings.a \
                   src/pvr/timers/pvrtimers.a \
                   src/pvr/windows/pvrwindows.a \
                   src/rendering/rendering.a \
                   src/settings/settings.a \
                   src/settings/dialogs/settings_dialogs.a \
                   src/settings/lib/settings_lib.a \
                   src/settings/windows/settings_windows.a \
                   src/storage/storage.a \
                   src/utils/utils.a \
                   src/video/dialogs/videodialogs.a \
                   src/video/video.a \
                   src/video/windows/videowindows.a \
                   src/view/view.a \
                   src/windowing/windowing.a \
                   src/windows/windows.a \
                   src/xbmc.a \

NWAOBJSXBMC=	src/threads/threads.a \
		src/commons/commons.a


ifeq (@USE_WEB_SERVER@,1)
DIRECTORY_ARCHIVES += src/network/httprequesthandler/httprequesthandlers.a
endif

DIRECTORY_ARCHIVES += src/interfaces/legacy/legacy.a
DIRECTORY_ARCHIVES += src/interfaces/python/python_binding.a

ifeq (@USE_OPENGL@,1)
DIRECTORY_ARCHIVES += src/rendering/gl/rendering_gl.a
endif

ifeq (@USE_OPENGLES@,1)
DIRECTORY_ARCHIVES += src/rendering/gles/rendering_gles.a
DIRECTORY_ARCHIVES += src/windowing/egl/windowing_egl.a
DIRECTORY_ARCHIVES += src/visualizations/EGLHelpers/eglhelpers.a
endif

ifeq (@USE_UPNP@,1)
DIRECTORY_ARCHIVES += lib/libUPnP/libupnp.a \
                      src/network/upnp/upnp.a
endif

ifeq (@USE_MDNSEMBEDDED@,1)
DIRECTORY_ARCHIVES += src/network/mdns/mdns.a
endif

INSTALL_FILTER = .*visualization\.dxspectrum.*
INSTALL_FILTER += .*visualization\.milkdrop.*

ifeq ($(findstring osx,@ARCH@),osx)
DIRECTORY_ARCHIVES += src/osx/osx.a
DIRECTORY_ARCHIVES += src/network/osx/network.a
DIRECTORY_ARCHIVES += src/network/linux/network_linux.a
DIRECTORY_ARCHIVES += src/powermanagement/osx/powermanagement.a
DIRECTORY_ARCHIVES += src/storage/osx/storage.a
DIRECTORY_ARCHIVES += src/windowing/osx/windowing_osx.a
INSTALL_FILTER += .*repository\.pvr-android\.xbmc\.org.*
INSTALL_FILTER += .*repository\.pvr-ios\.xbmc\.org.*
INSTALL_FILTER += .*repository\.pvr-win32\.xbmc\.org.*
else
INSTALL_FILTER += .*repository\.pvr-ios\.xbmc\.org.*
INSTALL_FILTER += .*repository\.pvr-win32\.xbmc\.org.*
INSTALL_FILTER += .*repository\.pvr-osx.*\.xbmc\.org.*
ifeq (@USE_ANDROID@,1)
DIRECTORY_ARCHIVES += src/input/linux/input_linux.a
DIRECTORY_ARCHIVES += src/input/touch/input_touch.a
DIRECTORY_ARCHIVES += src/input/touch/generic/input_touch_generic.a
DIRECTORY_ARCHIVES += src/network/linux/network_linux.a
DIRECTORY_ARCHIVES += src/powermanagement/android/powermanagement_android.a
DIRECTORY_ARCHIVES += src/storage/android/storage_android.a
DIRECTORY_ARCHIVES += src/windowing/X11/windowing_X11.a
else
DIRECTORY_ARCHIVES += src/input/linux/input_linux.a
DIRECTORY_ARCHIVES += src/network/linux/network_linux.a
DIRECTORY_ARCHIVES += src/powermanagement/linux/powermanagement_linux.a
DIRECTORY_ARCHIVES += src/storage/linux/storage_linux.a
DIRECTORY_ARCHIVES += src/windowing/X11/windowing_X11.a
INSTALL_FILTER += .*repository\.pvr-android\.xbmc\.org.*
endif
endif

ifeq ($(findstring freebsd,@ARCH@),freebsd)
DIRECTORY_ARCHIVES += src/freebsd/freebsd.a
endif

ifeq (@HAVE_XBMC_NONFREE@,1)
DIRECTORY_ARCHIVES += lib/UnrarXLib/UnrarXLib.a
endif

ifeq (@USE_ANDROID@,1)
DIRECTORY_ARCHIVES += src/android/loader/AndroidDyload.a
DIRECTORY_ARCHIVES += src/windowing/android/windowing_android.a
DIRECTORY_ARCHIVES += src/android/bionic_supplement/bionic_supplement.a
DIRECTORY_ARCHIVES += src/android/jni/jni.a
endif

ifeq (@USE_OMXPLAYER@,1)
DIRECTORY_ARCHIVES += src/cores/omxplayer/omxplayer.a
endif

PAPCODECS_DIRS= \
	lib/nosefart \
	lib/timidity \
	lib/libsidplay2 \
	lib/stsound/StSoundLibrary \
	lib/snesapu/SNES/SNESAPU \
	lib/vgmstream

ifeq (@USE_ASAP_CODEC@,1)
PAPCODECS_DIRS+= \
	lib/asap
endif

LIB_DIRS=\
	lib/cximage-6.0 \
	lib/libexif \
	lib/libhdhomerun \
	lib/cpluff \
	lib/xbmc-dll-symbols

ifeq (@USE_MYSQL@,1)
LIB_DIRS += lib/cmyth
CMYTH=cmyth
endif

SS_DIRS=
ifneq (@DISABLE_RSXS@,1)
  SS_DIRS+= src/screensavers/rsxs-0.9/xbmc
else
  INSTALL_FILTER+= .*screensaver\.rsxs.*
endif

ifneq (@DISABLE_SPECTRUM@,1)
  VIS_DIRS+= src/visualizations/OpenGLSpectrum
else
  INSTALL_FILTER+= .*visualization\.glspectrum.*
endif

ifneq (@DISABLE_WAVEFORM@,1)
  VIS_DIRS+= src/visualizations/WaveForm
else
  INSTALL_FILTER+= .*visualization\.waveform.*
endif

ifneq (@DISABLE_FISHBMC@,1)
  VIS_DIRS+= src/visualizations/fishBMC
else
  INSTALL_FILTER+= .*visualization\.fishbmc.*
endif

ifneq (@DISABLE_PROJECTM@,1)
  VIS_DIRS+= src/visualizations/XBMCProjectM
else
  INSTALL_FILTER+= .*visualization\.projectm.*
endif

ifneq (@DISABLE_GOOM@,1)
  VIS_DIRS+=src/visualizations/Goom
else
  INSTALL_FILTER+= .*visualization\.goom.*
endif

LIBADDON_DIRS=\
	lib/addons/library.xbmc.addon \
	lib/addons/library.xbmc.codec \
	lib/addons/library.xbmc.pvr \
	lib/addons/library.xbmc.gui \

CONFLUENCE_MEDIA=addons/skin.confluence/media
SKIN_DIRS=$(CONFLUENCE_MEDIA)

ifeq (@USE_TOUCH_SKIN@,1)
TOUCH_SKIN_MEDIA=addons/skin.re-touched/media
SKIN_DIRS+=$(TOUCH_SKIN_MEDIA)
endif

LIBS=@LIBS@
CFLAGS=@CFLAGS@
CXXFLAGS=@CXXFLAGS@
LDFLAGS=@LDFLAGS@
INCLUDES=$(sort @INCLUDES@)

CLEAN_FILES=xbmc.bin xbmc-xrandr libxbmc.so

DISTCLEAN_FILES=config.h config.log config.status tools/Linux/xbmc.sh \
        tools/Linux/xbmc-standalone.sh autom4te.cache config.h.in~ \
        system/libcpluff-@ARCH@.so

ifeq (@USE_LIBXBMC@,1)
FINAL_TARGETS+=libxbmc.so
ifeq (@USE_ANDROID@,1)
FINAL_TARGETS+=skins
endif
else
FINAL_TARGETS=xbmc.bin skins xbmc-xrandr
endif
FINAL_TARGETS+=Makefile externals

GTEST_DIR = lib/gtest
GTEST_INCLUDES = -I$(GTEST_DIR)/include
GTEST_LIBS = $(GTEST_DIR)/lib/.libs/libgtest.a

CHECK_DIRS = src/addons/test \
             src/filesystem/test \
             src/music/tags/test \
             src/utils/test \
             src/video/test \
             src/threads/test \
             src/interfaces/python/test \
             src/cores/AudioEngine/Sinks/test \
             src/test
CHECK_LIBS = src/addons/test/addonsTest.a \
             src/filesystem/test/filesystemTest.a \
             src/music/tags/test/tagsTest.a \
             src/utils/test/utilsTest.a \
             src/video/test/videoTest.a \
             src/threads/test/threadTest.a \
             src/interfaces/python/test/pythonSwigTest.a \
             src/cores/AudioEngine/Sinks/test/AESinkTest.a \
             src/test/xbmc-test.a

ifeq (@USE_WAYLAND@,1)
CHECK_LIBS += src/windowing/tests/wayland/test_wayland.a

ifeq (@USE_WAYLAND_TEST_EXTENSION@,1)
WAYLAND_TEST_MODULE = src/windowing/tests/wayland/xbmc-wayland-test-extension.so
$(WAYLAND_TEST_MODULE): force
	$(MAKE) -C $(@D) $(@F)
CHECK_EXTENSIONS = $(WAYLAND_TEST_MODULE)
CHECK_LIBADD=@WAYLAND_TEST_LIBS@
endif
endif

ifeq (@USE_SSE4@,1)
LIBSSE4+=sse4
sse4 : force
	$(MAKE) -C src/linux/sse4
endif

CHECK_PROGRAMS = xbmc-test

CLEAN_FILES += $(CHECK_PROGRAMS) $(CHECK_EXTENSIONS)

all : $(FINAL_TARGETS)
	@echo '-----------------------'
	@echo 'XBMC built successfully'
	@echo '-----------------------'

include Makefile.include

.PHONY : dllloader exports visualizations screensavers eventclients papcodecs \
	dvdpcodecs dvdpextcodecs imagelib codecs externals force skins libaddon check \
	testframework testsuite

# hack targets to keep build system up to date
Makefile : config.status $(addsuffix .in, $(AUTOGENERATED_MAKEFILES))
	@echo "Regenerating Makefiles..."
	@./config.status &> /dev/null
	@echo "done"

config.status: configure

# skin textures
ifeq (@USE_TEXTUREPACKER@,1)
skins: tools/TexturePacker/TexturePacker force
	 $(MAKE) -C $(CONFLUENCE_MEDIA)
ifeq (@USE_TOUCH_SKIN@,1)
	 $(MAKE) -C $(TOUCH_SKIN_MEDIA)
endif
else
skins:
endif

# Setup some dependencies for subdir makes
src/cores/paplayer/paplayer.a: papcodecs
$(DVDPLAYER_ARCHIVES)         : dvdpcodecs

lib/cpluff/libcpluff/.libs/libcpluff.a: force
	$(MAKE) -C lib/cpluff/libcpluff
system/libcpluff-@ARCH@.so: lib/cpluff/libcpluff/.libs/libcpluff.a exports
ifeq ($(findstring osx,@ARCH@), osx)
  ifeq (@ARCH@, arm-osx)
	$(CXX) $(LDFLAGS) -all_load -bundle -flat_namespace -undefined dynamic_lookup -read_only_relocs suppress -o $@ $<
  else
	$(CXX) $(LDFLAGS) -all_load -bundle -flat_namespace -undefined dynamic_lookup -lexpat $(BUNDLE1_O) -o $@ $<
  endif
else
	$(CXX) $(LDFLAGS) -shared -o $@ -Wl,--whole-archive $< \
		-Wl,--no-whole-archive  \
		`cat src/cores/DllLoader/exports/wrapper.def` src/cores/DllLoader/exports/wrapper.o -lexpat
endif

exports: src/cores/DllLoader/exports/exports.a src/cores/DllLoader/exports/util/exports_utils.a
	$(MAKE) -C src/cores/DllLoader/exports wrapper.def
dllloader: exports src/cores/DllLoader/dllloader.a

ifeq (@USE_OPENGLES@,1)
EGLHELPERS=src/visualizations/EGLHelpers/eglhelpers.a
endif

$(VIS_DIRS): force exports $(EGLHELPERS)
	$(MAKE) -C $@

$(SS_DIRS): force exports
	$(MAKE) -C $@

visualizations: $(VIS_DIRS)

screensavers: $(SS_DIRS)

libaddon: exports
	$(MAKE) -C lib/addons/library.xbmc.addon
	$(MAKE) -C lib/addons/library.xbmc.codec
	$(MAKE) -C lib/addons/library.xbmc.gui
	$(MAKE) -C lib/addons/library.xbmc.pvr
dvdpcodecs: dllloader
	$(MAKE) -C lib/libdvd

ifeq (@USE_LIBSTAGEFRIGHT@,1)
dvdpextcodecs: libxbmc.so 
	$(MAKE) -C src/cores/dvdplayer/DVDCodecs/Video/libstagefrightICS
else
dvdpextcodecs:
endif

eventclients:
ifeq ($(findstring osx,@ARCH@), osx)
ifneq ($(findstring arm,@ARCH@), arm)
	$(MAKE) -C tools/EventClients/Clients/OSXRemote
endif
else
	$(MAKE) -C tools/EventClients
endif
libexif: dllloader
	$(MAKE) -C lib/libexif
cmyth: dllloader
	$(MAKE) -C lib/cmyth
libhdhomerun: dllloader
	$(MAKE) -C lib/libhdhomerun
papcodecs: dllloader dvdpcodecs
	test -d system/players/paplayer || mkdir system/players/paplayer
	$(MAKE) -C lib/vgmstream
	$(MAKE) -C lib/timidity
	$(MAKE) -C lib/nosefart
ifneq ($(findstring arm-osx,@ARCH@), arm-osx)
	$(MAKE) -C lib/libsidplay2
endif
ifeq (@USE_ASAP_CODEC@,1)
  ifneq ($(findstring osx,@ARCH@), osx)
	$(MAKE) -C lib/asap asap-xbmc
  endif
endif
	$(MAKE) -C lib/stsound/StSoundLibrary
ifeq ($(or $(findstring powerpc,@ARCH@),$(findstring x86_64-linux,@ARCH@),$(findstring arm, @ARCH@),$(findstring freebsd,@ARCH@)),)
	$(MAKE) -C lib/snesapu/SNES/SNESAPU
endif
imagelib: dllloader
	$(MAKE) -C lib/cximage-6.0

pvraddons: exports
ifeq (@USE_PVR_ADDONS@,1)
	$(MAKE) -C pvr-addons
endif

codecs: papcodecs dvdpcodecs dvdpextcodecs

libs: $(LIBSSE4) libhdhomerun imagelib libexif system/libcpluff-@ARCH@.so $(CMYTH)

externals: codecs libs visualizations screensavers libaddon pvraddons

xcode_depends: \
	codecs libs visualizations screensavers eventclients skins libaddon \
	lib/libsquish/libsquish.a \
	lib/libRTV/librtv.a \
	lib/libXDAAP/libxdaap.a \
	lib/SlingboxLib/SlingboxLib.a

DYNOBJSXBMC= \
	src/linux/linux.a \
	src/network/network.a \
	src/video/windows/videowindows.a \
	src/utils/utils.a \
	src/cores/DllLoader/exports/util/exports_utils.a \
	src/cores/DllLoader/exports/exports.a \
	src/settings/settings.a \
	src/video/video.a \
	src/pvr/addons/pvraddons.a \
	src/pvr/windows/pvrwindows.a \
	src/guilib/guilib.a # must be dynamic to avoid linker errors

ifeq ($(findstring freebsd,@ARCH@),freebsd)
DYNOBJSXBMC+= src/freebsd/freebsd.a
endif

ifeq (@USE_STATIC_FFMPEG@,1)
FFMPEGOBJS = @FFMPEG_LIBDIR@/libavcodec.a \
             @FFMPEG_LIBDIR@/libavfilter.a \
             @FFMPEG_LIBDIR@/libswresample.a \
             @FFMPEG_LIBDIR@/libavformat.a \
             @FFMPEG_LIBDIR@/libavutil.a \
             @FFMPEG_LIBDIR@/libpostproc.a \
             @FFMPEG_LIBDIR@/libswscale.a
DYNOBJSXBMC+= $(FFMPEGOBJS)
LIBS+= @GNUTLS_ALL_LIBS@ @VORBISENC_ALL_LIBS@

$(FFMPEGOBJS): dvdpcodecs
endif

ifneq (@USE_LIBXBMC@,1)
MAINOBJS+=src/main/main.a
else
ifeq (@USE_ANDROID@,1)
MAINOBJS+=src/android/activity/activity.a
endif # USE_ANDROID
endif # USE_LIBXBMC


OBJSXBMC =$(DIRECTORY_ARCHIVES)
OBJSXBMC:=$(filter-out $(DYNOBJSXBMC), $(OBJSXBMC))

BIN_DIRS = $(dir $(DIRECTORY_ARCHIVES)) $(dir $(NWAOBJSXBMC)) $(dir $(MAINOBJS))

DIRS= $(BIN_DIRS) $(EC_DIRS) $(XBMCTEX_DIRS) $(DVDPCODECS_DIRS) $(PAPCODECS_DIRS) \
	$(LIB_DIRS) $(SS_DIRS) $(VIS_DIRS) $(LIBADDON_DIRS) $(SKIN_DIRS) src/main

$(NWAOBJSXBMC) $(DIRECTORY_ARCHIVES) $(MAINOBJS): force
	@$(MAKE) $(if $(V),,-s) -C $(@D)

# Binary Addon bindings
include src/addons/addon-bindings.mk

libxbmc.so: $(OBJSXBMC) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(MAINOBJS)
ifeq ($(findstring osx,@ARCH@), osx)
	$(SILENT_LD) $(CXX) $(LDFLAGS) -bundle -o $@ $(MAINOBJS) -Wl,-all_load,-ObjC $(MAINOBJS) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(OBJSXBMC) $(LIBS) -read_only_relocs suppress
else
	$(SILENT_LD) $(CXX) $(CXXFLAGS) $(LDFLAGS) -shared -o $@ -Wl,--whole-archive $(MAINOBJS) -Wl,--no-whole-archive,--start-group $(MAINOBJS) $(DYNOBJSXBMC) $(OBJSXBMC) -Wl,--end-group -Wl,--no-undefined $(NWAOBJSXBMC) $(LIBS)
endif

xbmc.bin: $(OBJSXBMC) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(MAINOBJS)

ifeq ($(findstring osx,@ARCH@), osx)
	$(SILENT_LD) $(CXX) $(LDFLAGS) -o xbmc.bin $(MAINOBJS) -Wl,-all_load,-ObjC $(MAINOBJS) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(OBJSXBMC) $(LIBS) -rdynamic
else
	$(SILENT_LD) $(CXX) $(CXXFLAGS) $(LDFLAGS) -o xbmc.bin $(MAINOBJS) -Wl,--start-group $(MAINOBJS) $(DYNOBJSXBMC) $(OBJSXBMC) -Wl,--end-group $(NWAOBJSXBMC) $(LIBS) -rdynamic
endif

xbmc-xrandr: xbmc-xrandr.c
ifneq (1,@USE_XRANDR@)
	# xbmc-xrandr.c gets picked up by the default make rules
	@echo "excluding xbmc-xrandr"
else
	$(SILENT_LD) $(CC) $(CFLAGS) $(LDFLAGS) -o xbmc-xrandr xbmc-xrandr.c -lXrandr -lX11 -lm
endif

tools/TexturePacker/TexturePacker: src/guilib/XBTF.h
	$(MAKE) -C tools/TexturePacker/


install-bin: xbmc.bin # developement convenience target
	sudo install -d $(DESTDIR)$(libdir)
	sudo install xbmc.bin $(DESTDIR)$(libdir)/xbmc

ifeq ($(findstring osx,@ARCH@), osx)
	# TODO: add osx install
else
install: install-binaries install-arch install-datas

apk: apk-clean install
	make -C tools/android/packaging

apk-clean:
	make -C tools/android/packaging clean

install-binaries: install-scripts
	@echo "Copying XBMC binary to $(DESTDIR)$(libdir)/xbmc/"
	@install -d $(DESTDIR)$(libdir)/xbmc
ifeq (1,@USE_XRANDR@)
	@install xbmc-xrandr $(DESTDIR)$(libdir)/xbmc/xbmc-xrandr
endif
ifeq (@USE_LIBXBMC@,1)
	@install libxbmc.so $(DESTDIR)$(libdir)/xbmc/libxbmc.so
else
	@install xbmc.bin $(DESTDIR)$(libdir)/xbmc/xbmc.bin
	@echo "You can run XBMC with the command 'xbmc'"
endif
endif

install-arch:
	@# Arch dependent files
ifeq (@USE_PVR_ADDONS@,1)
	$(MAKE) -C pvr-addons install
endif
ifeq ($(findstring freebsd,@ARCH@), freebsd)
	@find -E system addons -type f -not -iregex ".*\.git.*" \
		-iregex ".*@ARCH@.*|.*\.vis|.*\.xbs" \
		-exec sh -c "install -d \"$(DESTDIR)$(libdir)/xbmc/\`dirname '{}'\`\"" \; \
		-and \
		-exec install "{}" $(DESTDIR)$(libdir)/xbmc/"{}" \; \
		-exec printf " -- %-75.75s\r" "{}" \;
else
ifeq ($(findstring Darwin,$(shell uname -s)),Darwin)
	@find -E system addons -type f -not -iregex ".*\.git.*" \
		-iregex ".*@ARCH@.*|.*\.vis|.*\.xbs" \
		-exec sh -c "install -d \"$(DESTDIR)$(libdir)/xbmc/\`dirname '{}'\`\"" \; \
		-and \
		-exec install "{}" $(DESTDIR)$(libdir)/xbmc/"{}" \; \
		-exec printf " -- %-75.75s\r" "{}" \;
else
	@find system addons -regextype posix-extended -type f -not -iregex ".*\.git.*" -iregex ".*\.so|.*\.vis|.*\.xbs|.*\.pvr" -exec install -D "{}" $(DESTDIR)$(libdir)/xbmc/"{}" \; -printf " -- %-75.75f\r"
endif
endif

install-scripts:
	@install -d $(DESTDIR)$(bindir)
	@install tools/Linux/xbmc.sh $(DESTDIR)$(bindir)/xbmc
	@install tools/Linux/xbmc-standalone.sh $(DESTDIR)$(bindir)/xbmc-standalone
	@install -d $(DESTDIR)$(datarootdir)/xbmc
	@install -m 0644 tools/Linux/FEH.py $(DESTDIR)$(datarootdir)/xbmc/FEH.py
	@install -d $(DESTDIR)$(datarootdir)/xsessions
	@install -m 0644 tools/Linux/xbmc-xsession.desktop $(DESTDIR)$(datarootdir)/xsessions/XBMC.desktop

install-datas: install-scripts
	@echo "Copying support and legal files..."
	@install -d $(DESTDIR)$(docdir)
	@for FILE in `ls LICENSE.GPL *.txt`; do \
		install -m 0644 "$$FILE" "$(DESTDIR)$(docdir)/$$FILE"; done
	@install -m 0644 "docs/README.linux" "$(DESTDIR)$(docdir)/README.linux"
	@echo "Done!"
	@echo "Copying system files to $(DESTDIR)$(datarootdir)/xbmc"
	@install -d $(DESTDIR)$(datarootdir)/xbmc
	@# Arch independent files
ifeq ($(findstring bsd,@ARCH@), bsd)
	@find -E addons language media sounds userdata system -type f \
		-not -iregex ".*@ARCH@.*|.*\.vis|.*\.xbs|.*\.git.*|.*\.so|.*\.dll|$(subst ${space},|,$(INSTALL_FILTER))" \
		-exec sh -c "install -d \"$(DESTDIR)$(datarootdir)/xbmc/\`dirname '{}'\`\"" \; \
		-and \
		-exec install -m 0644 "{}" $(DESTDIR)$(datarootdir)/xbmc/"{}" \; \
		-exec printf " -- %-75.75s\r" "{}" \;
else
ifeq ($(findstring Darwin,$(shell uname -s)),Darwin)
	@find -E addons language media sounds userdata system -type f \
		-not -iregex ".*@ARCH@.*|.*\.vis|.*\.xbs|.*\.git.*|.*\.so|.*\.dll|$(subst ${space},|,$(INSTALL_FILTER))" \
		-exec sh -c "install -d \"$(DESTDIR)$(datarootdir)/xbmc/\`dirname '{}'\`\"" \; \
		-and \
		-exec install -m 0644 "{}" $(DESTDIR)$(datarootdir)/xbmc/"{}" \; \
		-exec printf " -- %-75.75s\r" "{}" \;
else
	@find addons language media sounds userdata system -regextype posix-extended -type f -not -iregex ".*@ARCH@.*|.*\.vis|.*\.xbs|.*\.git.*|.*\.so|.*\.dll|.*\.pvr|$(subst ${space},|,$(INSTALL_FILTER))" -exec install -D -m 0644 "{}" $(DESTDIR)$(datarootdir)/xbmc/"{}" \; -printf " -- %-75.75f\r"
endif
endif
	@# Icons and links
	@install -d $(DESTDIR)$(datarootdir)/applications
	@install -m 0644 tools/Linux/xbmc.desktop $(DESTDIR)$(datarootdir)/applications/xbmc.desktop
	@install -d $(DESTDIR)$(datadir)/icons/hicolor/48x48/apps
	@install -m 0644 media/icon48x48.png $(DESTDIR)$(datadir)/icons/hicolor/48x48/apps/xbmc.png
	@install -d $(DESTDIR)$(datadir)/icons/hicolor/256x256/apps
	@install -m 0644 media/icon256x256.png $(DESTDIR)$(datadir)/icons/hicolor/256x256/apps/xbmc.png
	@test -z "$(DESTDIR)" && gtk-update-icon-cache -f -q -t $(datadir)/icons/hicolor || :

	@echo "Copying bindings to $(DESTDIR)$(includedir)/xbmc"
	@install -d $(DESTDIR)$(includedir)/xbmc
	@for f in $(BINDINGS); do \
	  install -m 0644 $$f $(DESTDIR)$(includedir)/xbmc ; \
	done
	@for f in project/cmake/*.cmake; do \
	  install -m 0644 $$f $(DESTDIR)$(libdir)/xbmc; \
	done
	@for f in project/cmake/scripts/common/*.cmake; do \
	  install -m 0644 $$f $(DESTDIR)$(libdir)/xbmc; \
	done

uninstall:
	@echo "Removing XBMC..."
	@rm -rf $(DESTDIR)$(libdir)/xbmc
	@rm -rf $(DESTDIR)$(datarootdir)/xbmc $(DESTDIR)$(bindir)/xbmc
	@rm -rf $(DESTDIR)$(bindir)/xbmc-standalone
	@rm -rf $(DESTDIR)$(datarootdir)/xsessions/XBMC.desktop
	@rm -rf $(libdir)/libXBMC_*
	@rm -rf $(prefix)/include/xbmc
	@echo "Done!"

clean-xbmc.bin:
	rm -f xbmc.bin
	for d in $(BIN_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-eventclients:
	for d in $(EC_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-xbmctex:
	for d in $(XBMCTEX_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-dvdpcodecs:
	for d in $(DVDPCODECS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-papcodecs:
	for d in $(PAPCODECS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-libs:
	for d in $(LIB_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-screensavers:
	for d in $(SS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-visualisations:
	for d in $(VIS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-libaddons:
	for d in $(LIBADDON_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-pvraddons:
ifeq (@USE_PVR_ADDONS@,1)
	if test -f pvr-addons/Makefile; then $(MAKE) -C pvr-addons clean; fi;
endif

clean-codecs: clean-dvdpcodecs clean-papcodecs

clean-externals: clean-codecs clean-eventclients clean-xbmctex clean-libs \
	clean-screensavers clean-visualisations clean-libaddons clean-pvraddons

ifeq (1,@GTEST_CONFIGURED@)
check: testsuite
	for check_program in $(CHECK_PROGRAMS); do $(CURDIR)/$$check_program; done

testsuite: $(CHECK_EXTENSIONS) $(CHECK_PROGRAMS)

testframework: $(GTEST_LIBS)

$(GTEST_LIBS): $(GTEST_DIR)/Makefile

$(GTEST_DIR)/Makefile: force
	$(MAKE) -C $(GTEST_DIR)

$(CHECK_LIBS): force
	@$(MAKE) $(if $(V),,-s) -C $(@D)

xbmc-test: $(CHECK_LIBS) $(OBJSXBMC) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(GTEST_LIBS)
ifeq ($(findstring osx,@ARCH@), osx)
	$(SILENT_LD) $(CXX) $(LDFLAGS) $(GTEST_INCLUDES) -o $@ -Wl,-all_load,-ObjC $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(OBJSXBMC) $(GTEST_LIBS) $(CHECK_LIBS) $(LIBS) $(CHECK_LIBADD) -rdynamic
else
	$(SILENT_LD) $(CXX) $(CXXFLAGS) $(LDFLAGS) $(GTEST_INCLUDES) -o $@ -Wl,--whole-archive $(DYNOBJSXBMC) $(OBJSXBMC) $(GTEST_LIBS) $(CHECK_LIBS) -Wl,--no-whole-archive $(NWAOBJSXBMC) $(LIBS) $(CHECK_LIBADD) -rdynamic
endif
else
# Give a message that the framework is not configured, but don't fail.
check testsuite testframework:
	@echo "Google Test Framework not configured, skipping testsuite check."
endif
